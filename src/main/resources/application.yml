# 서버 설정 #######################################################################
server:
  port: 8080 # 서버 접속을 위한 입구
  servlet:
    context-path: / # 서버 접속 주소
    encoding:
      charset: utf-8 # 서버에서 한글 사용
      enabled: true
    

spring:
  # 콘솔창에 컬러를 입혀주는 설정 ###########################################
  output:
    ansi:
      enabled: always

  # 뷰 리졸버 설정 ###################################################################
  mvc:
    view: 
      prefix: /WEB-INF/views/ # 요청 경로 지정
      suffix: .jsp  #해당 경로에 있는 .jsp파일로 응답할 것.
      
  # DB 설정 ##################################################################
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver # DB 이름
    url: jdbc:mariadb://localhost:3306/photogram?serverTimezone=Asia/Seoul # DB 경로
    username: cos 
    password: cos1234
    
  # ORM(Object-Relational Mapping) ##################################################
  # 객체와 관계형 데이터베이스의 데이터를 자동으로 연결해준다
  jpa:
    open-in-view: true # true, false
    # view를 오픈 할 것인가?
    # false : 응답라인에서 Service가 비지니스 로직을 처리하고 Session이 종료된다.
    # true : 응답라인에서 Controller가 응답을 처리하고 Session이 종료된다.
    hibernate:
      ddl-auto: update #create, update, none 
      # hibernate는 SQL을 직접 사용하지 않고 메서드만으로 쿼리를 사용해주게 하는 라이브러리
      # hibernate 기술을 쉽게 사용하게 해주는 라이브러리가 JPA이다.
      # ddl-auto: create 는 서버 실행할 때마다 테이블을 삭제하고 새로 만드는 설정이다.
      # ddl-auto: none 는 서버 실행할 때마다 아무것도 하지 않는 옵션이다.
      # ddl-auto: update 는 필드 수정시에 필요한 옵션이다.
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
      
  # 파일 업로드 설정 ###################################################
  servlet:
    multipart: # 파일의 타입을 여러가지로 받을 것이고,
      enabled: true # 서버에 사진을 전송하는것을 허용한다.
      max-file-size: 2MB # 파일의 사이즈 제한

  # 스프링 시큐리티 설정 ##################################################
  security:
    user:
      name: test
      password: 1234   

# OAuth2 로그인 설정 ##############################################
    oauth2:
      client:
        registration:
          facebook:
            client-id: 491966152678919
            client-secret: 7b93115127c20e2e439a12606ed79a1b
            scope:
            - public_profile
            - email

          google:
            client-id: 585503717477-oln2t97od4edbejigvpv4a3rb6kc3r1r.apps.googleusercontent.com
            client-secret: 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
            scope:
            - email
            - profile

          kakao:
            client-id: a432c90ec0018e07716a7fa15a190ae3
            client-secret: U0e2QtiLxNFAJKyTw3IqI5u4DudmRs9Z
            scope:
            - account_email
            - profile_nickname
            - profile_image
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-name: Kakao
            client-authentication-method: POST

          naver:
            client-id: _2Q5o6JtAKr29Ot_1dAO
            client-secret: 8ok7FFJ7ej
            scope:
            - id
            - email
            - name
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            client-name: Naver

        provider:
          kakao:
            authorization-uri:  https://kauth.kakao.com/oauth/authorize # 요청 URL
            token-uri:  https://kauth.kakao.com/oauth/token # 토큰을 받을 주소
            user-info-uri:  https://kapi.kakao.com/v2/user/me # 회원정보를 받는 URL
            user-name-attribute: id # 받을 데이터의 최상위 키 값

          naver:
            authorization-uri:  https://nid.naver.com/oauth2.0/authorize 
            token-uri:  https://nid.naver.com/oauth2.0/token 
            user-info-uri:  https://openapi.naver.com/v1/nid/me 
            user-name-attribute: response 


# 파일이 저장될 커스텀 경로 #################################################
file:
  path: C:/workspace/springbootwork/upload/
